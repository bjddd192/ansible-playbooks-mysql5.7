# MySQL 客户端配置
[client]
# 默认登录的用户(用于快速登录使用)
user={{ v_mysql_user }}
# 默认登录的用户密码
# password={{ v_mysql_password }}
# 默认登录的服务器
host=localhost
# 默认登录的端口
port={{ v_mysql_port }}
# 客户端默认的字符集
default-character-set={{ v_mysql_default_character_set }}
# mysql 以 socket 方式运行的 sock 文件位置
socket={{ v_mysql_data_dir }}/{{ v_mysql_port }}.sock

[mysql]
# mysql 控制台提示符设置
prompt="\U [\d]> "
# 禁用命令自动补全功能(开启的话 mysql 会预读数据库信息，如果数据库中表非常多，预读数据库信息，将非常慢)
no-auto-rehash

# MySQL 服务端配置
[mysqld]
# 默认的服务启动用户
user=mysql
# 默认端口设置
port={{ v_mysql_port }}
# mysql 数据文件存储目录
datadir={{ v_mysql_data_dir }}
# 临时目录设置  
tmpdir={{ v_mysql_tmp_dir }}
innodb_tmpdir={{ v_mysql_tmp_dir }}
slave_load_tmpdir={{ v_mysql_tmp_dir }}
# pid 文件路径
pid_file={{ v_mysql_data_dir }}/{{ v_mysql_port }}.pid
# 网络上的两个程序通过一个双向的通信连接实现数据的交换，这个连接的一端称为一个socket。
# 指定 socket 文件的路径的好处是如果启用了多实例 mysql 时，可以通过 socket 文件来快速的登录 mysql 对应不同端口下的实例，
# 如在一台有部署 2 个实例的 mysql 服务一个是用 3306，一个是用 3307 端口，那么就可以通过 2 个不同的 socket 文件快速的登录。
# 例如：
# mysql -uroot -p --socket=/tmp/mysql3306.sock
# mysql -uroot -p --socket=/tmp/mysql3307.sock
socket={{ v_mysql_data_dir }}/{{ v_mysql_port }}.sock
# 错误日志位置
log_error={{ v_mysql_data_dir }}/{{ v_mysql_port }}_error.log
# 禁用主机名解析
# 不把IP地址解析为主机名; 与访问控制(mysql.user数据表)有关的检查全部通过IP地址行进。
skip_name_resolve=ON
# 默认的数据库引擎
default_storage_engine=InnoDB
# 默认字符集设置
character_set_server={{ v_mysql_default_character_set }}
# 默认服务器排序字符集设置。utf8mb4_unicode_ci 和 utf8mb4_general_ci 对比：
# utf8mb4_general_ci 比 utf8mb4_unicode_ci 速度要来得快，
# utf8mb4_unicode_ci 比 utf8mb4_general_ci 要来得精确。
# 绝大多数情况下发，使用者更应该关心字符集与排序规则在 db 里的统一。
collation_server={{ v_mysql_collation_server }}
# 表名用小写保存到硬盘上，并且表名比较时不对大小写敏感。应在所有平台上将该变量设置为1，强制将名字转换为小写。
lower_case_table_names=1
# 显式对 timestamp 类型的列处理默认值(默认会隐式赋值，对不了解其逻辑的人会有困扰，建议用显式方式)
explicit_defaults_for_timestamp=ON
# 是否支持符号链接(仅 MyISAM 支持)，即数据库或表可以存储在 my.cnf 中指定 datadir 之外的分区或目录，为 0 不开启。
symbolic_links=0
# 默认 UTC 这样会导致日志中记录的时间比中国这边的慢，导致查看日志不方便。修改为 SYSTEM 就能解决问题。
log_timestamps=SYSTEM
# 设定默认的事务隔离级别，可用的级别如下:
# READ-UNCOMMITTED（读取未提交内容）, READ-COMMITTED（读取提交内容）, REPEATABLE-READ（可重读，默认值）, SERIALIZABLE（可串行化，最高）
transaction_isolation={{ v_mysql_transaction_isolation }}
# 二进制日志文件前缀配置。这些路径相对于datadir。
log_bin={{ v_mysql_binlog_dir }}/mysql-bin
# 是否允许 master 创建 function 并同步到 slave，开启有可能导致主从的数据不一致的风险，建议关闭。
log_bin_trust_function_creators=OFF
# 服务器唯一ID，默认是1，通常采用本机IP后位数，主从必须保持独立性。
server_id={{ v_mysql_server_id }}
# binlog 记录内容的方式，记录被操作的每一行
binlog_format=ROW
# 为每个session 分配的内存, 在事务过程中用来存储二进制日志的缓存
binlog_cache_size=4M
# binlog 能够使用的最大 cache 内存大小
max_binlog_cache_size=2G
# 如果二进制日志写入的内容超出给定值，日志就会发生滚动。你不能将该变量设置为大于 1 GB或小于 4096 字节。 默认值是 1 GB。
max_binlog_size=1G
# binlog 保留时间，视具体需求而定。
expire_logs_days={{ v_mysql_expire_logs_days }}
# sync_binlog=0，当事务提交之后，MySQL不做 fsync 之类的磁盘同步指令刷新 binlog_cache 中的信息到磁盘，
# 而让 Filesystem 自行决定什么时候来做同步，或者 cache 满了之后才同步到磁盘。
# sync_binlog=0 的性能是最好的，但是风险也是最大的。因为一旦系统 Crash，在 binlog_cache 中的所有 binlog 信息都会被丢失。
# sync_binlog=n，当每进行 n 次事务提交之后，MySQL 将进行一次 fsync 之类的磁盘同步指令来将 binlog_cache 中的数据强制写入磁盘。
# 当 n 设置为 “1” 的时候，是最安全但是性能损耗最大的设置。
# 从以往经验和相关测试来看，对于高并发事务的系统来说，“sync_binlog” 设置为 0 和设置为 1 的系统写入性能差距可能高达 5 倍甚至更多。
sync_binlog={{ v_mysql_sync_binlog }}
{% if v_enable_rpl_semi_sync == 1 %}
# 启用半同步复制插件
plugin-load="rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so"
rpl_semi_sync_master_enabled=ON
rpl_semi_sync_slave_enabled=ON
# MySQL 5.7 中 sync_binlog 参数和半同步中 after_commit 和 after_sync 的区别
# https://yq.aliyun.com/articles/491719
# 设置为 after_sync 后显然更加安全，如果是 after_commit 极端情况下可能引擎层已经提交完成，
# 事物对主库可见，但是从库还没有传输完成如果从库奔溃可能出现少事物的情况。
rpl_semi_sync_master_wait_point=AFTER_SYNC
{% endif %}
# 启用 GTID 类型，否则就是普通的复制架构
gtid_mode=ON
# 强制 GTID 的一致性
enforce_gtid_consistency=ON
# 作为从库时生效，想进行级联复制，则需要此参数
log_slave_updates=ON
# 开启慢查询日志收集
slow_query_log=ON
# 慢查询日志位置
slow_query_log_file={{ v_mysql_slowlog_dir }}/slow.log
# 查询超过 {{ v_mysql_long_query_time }} 秒的视为慢查询，记录日志
long_query_time=2
# 检索的行数必须达到此值才可被记为慢查询
# 这个参数可以用来排除在检查慢查询时一些不必要的干扰
min_examined_row_limit=100
# 是否记录未使用索引的语句
log_queries_not_using_indexes=OFF
# 是否记录那些慢的 optimize table，analyze table 和 alter table 语句
log_slow_admin_statements=OFF
# 记录由 Slave 所产生的慢查询
log_slow_slave_statements=OFF
# 日志自动过期清理天数
expire_logs_days=30
# 当 sql_mode 中包涵 NO_ENGINE_SUBSTITUTION 时，如果 create table 时指定的 engine 项不被支持，这个时候 mysql 会支持报错。
# STRICT_TRANS_TABLES 模式：严格模式，进行数据的严格校验，错误数据不能插入，报 error 错误。
sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES
# 服务器支持的最大连接数
max_connections={{ v_mysql_max_connections }}
# 用户能最大连接进来的数量
max_user_connections={{ v_mysql_max_user_connections }}
# 最大错误连接数
max_connect_errors={{ v_mysql_max_connect_errors }}
# 服务器关闭非交互连接之前等待活动的秒数。客户端如果未使用连接池技术，需配置此值，如果客户端使用连接池技术，保持默认就行。
wait_timeout={{ v_mysql_wait_timeout }}
# 服务器关闭交互连接之前等待活动的秒数。
interactive_timeout={{ v_mysql_interactive_timeout }}
# InnoDB 存储引擎的表数据和索引数据的最大内存缓冲区大小。可以设置为机器物理内存大小的60%~70%
innodb_buffer_pool_size={{ v_mysql_innodb_buffer_pool_size }}
# InnoDB 存储引擎用来存储数据库结构和其他内部数据结构的内存池的大小
# innodb_additional_mem_pool_size 和 innodb_use_sys_malloc 在 MySQL 5.7.4 中移除
# 随着多核心CPU的广泛应用和操作系统的成熟，操作系统能够提供性能更高、可伸缩性更好的内存分配器，
# 包括 Hoard、libumem、mtmalloc、ptmalloc、tbbmalloc 和 TCMalloc 等。
# InnoDB 实现的内存分配器相比操作系统的内存分配器并没有明显优势，
# 所以在之后的版本，会移除 innodb_additional_mem_pool_size 和 innodb_use_sys_malloc 两个参数，统一使用操作系统的内存分配器。
# [MySQL · 参数故事 · innodb_additional_mem_pool_size](http://mysql.taobao.org/monthly/2016/04/01/)
# innodb_additional_mem_pool_size=16M
# 日志缓存的大小
innodb_log_buffer_size=32M
# 当设置为0，该模式速度最快，但不太安全，mysqld进程的崩溃会导致上一秒钟所有事务数据的丢失。
# 当设置为1，该模式是最安全的，但也是最慢的一种方式。在 mysqld 服务崩溃或者服务器主机 crash 的情况下，binary log 只有可能丢失最多一个语句或者一个事务。
# 当设置为2，该模式速度较快，也比 0 安全，只有在操作系统崩溃或者系统断电的情况下，上一秒钟所有事务数据才可能丢失。
innodb_flush_log_at_trx_commit={{ v_mysql_innodb_flush_log_at_trx_commit }}
# 允许多表空间，为每个 InnoDB 表分配单独的表空间，每个新创建的表到它所属的数据库目录下的文件 tbl_name.ibd 里。
innodb_file_per_table=ON
# 设置一个日志组中每个日志文件的大小，通常设置为256M。
innodb_log_file_size=256M
# 设置使用多少个日志文件，通常来说2~3是比较好的。
innodb_log_files_in_group=3
# 设置查询缓存的类型。
# 当这个参数为 0 或 OFF 时，则 MySQL 服务器不会启用查询缓存
# 当这个参数为 1 或 ON 时，则 MySQL 服务器会缓存所有查询结果（除了带有 SELECT SQL_NO_CACHE 的语句）
# 当这个参数为 2 或 DEMAND 时，则 MySQL 服务器只会缓存带有 SELECT SQL_CACHE 的语句。
query_cache_type=OFF
# 查询缓冲常被用来缓冲 SELECT 的结果并且在下一次同样查询的时候不再执行直接返回结果.
# 打开查询缓冲可以极大的提高服务器速度, 如果你有大量的相同的查询并且很少修改表.
# 查看 “Qcache_lowmem_prunes” 状态变量来检查是否当前值对于你的负载来说是否足够高.
# 注意: 在你表经常变化的情况下或者如果你的查询原文每次都不同,
# 查询缓冲也许引起性能下降而不是性能提升.
query_cache_size=0
# 对 MyISAM 表性能影响很大的参数(注意该参数对其他类型的表设置无效)
# 指定用于索引的缓冲区大小，增加它可得到更好的索引处理性能。
# 注意：该参数值设置的过大反而会是服务器整体效率降低！
key_buffer_size=512M
# 通常，获取最快连接的方法是增加索引。当不能增加索引的时候，使全连接变快的方法是增大 join_buffer_size 参数。
# 通常来说，可以将此参数在全局上设置一个较小的值，而在需要执行大连接的会话中在会话级别进行设置。默认值是256KB。
join_buffer_size=4M
# 每个会话执行排序操作所分配的内存大小。
# 如果在 SHOW GLOBAL STATUS 输出结果中看到每秒输出的 Sort_merge_passes 状态参数很大，
# 可以考虑增大 sort_buffer_size 这个值来提高 ORDER BY 和 GROUP BY 的处理速度。
# 建议设置为 1~4 MB。当个别会话需要执行大的排序操作时，在会话级别增大这个参数。
sort_buffer_size=4M
# mysql 的 filesort 有两个方法，MySQL 4.1之前是使用方法 A, 之后版本会使用改进的算法 B, 
# 但使用方法 B 的前提是列长度的值小于 max_length_for_sort_data，默认值为 1024
max_length_for_sort_data=10240
# 随机读取数据缓冲区使用内存，将这个值设到一个较大的值可以显著提升 ORDER BY 的性能。
# 然而这个参数会应用到所有的客户端连接，所有不应该将这个参数在全局级别设为一个较大的值；在运行大查询的会话中，在会话级别增大这个参数即可。
read_rnd_buffer_size=4M
# 为每个线程对 MyISAm 表执行顺序读所分配的内存。如果数据库有很多顺序读，可以增加这个参数，默认值是 131072 字节。这个参数的值需要是 4KB 的整数倍。
read_buffer_size=16k
# 内部内存临时表的最大内存。
# 比如大数据量的 group by ,order by 时可能用到临时表，超过了这个值将写入磁盘，系统IO压力增大
tmp_table_size=200M
# 设置用户创建的 MEMORY表允许增长的最大容量
max_heap_table_size=200M
# 所有线程能打开的表的数量
table_open_cache=4800
# 表缓存实例数，为通过减小会话间争用提高扩展性，表缓存会分区为 table_open_cache/table_open_cache_instances 大小的较小的缓存实例。
# 默认该值为1，当16核以上可设置为 8 或 16。
table_open_cache_instances=16
# 启用事件调度功能   
event_scheduler=ON
# group_concat 函数最大连接长度
group_concat_max_len=1024000
# SQL数据包发送的大小，如果有BLOB对象建议修改成1G
max_allowed_packet=128M
# 最大文件打开数设置
open_files_limit=65535
# MySQL 服务器连接请求队列所能处理的最大连接请求数，如果队列放满了，后续的连接才会拒绝。
# back_log 值说明 MySQL 临时停止响应新请求前在短时间内可以堆起多少请求。如果你需要在短时间内允许大量连接，可以增加该数值。
back_log=1024
# MySQL 服务缓存以重用的线程数。当客户端断开连接的时候，如果线程缓存没有使用满，则客户端的线程被放入缓存中。
# 如果有客户端断开连接后再次连接到 MySQL 服务且线程在缓存中，则 MySQL 服务会优先使用缓存中的线程；
# 如果线程缓存没有这些线程，则 MySQL 服务器会创建新的线程。如果数据库有很多的新连接，可以增加这个参数来提升性能。
# 如果 MySQL 服务器每秒有上百个连接，可以增大 thread_cache_size 参数来使 MySQL 服务器使用缓存的线程。
# 通过检查 Connections 和 Threads_created 状态参数，可以判断线程缓存是否足够。
# 这个参数默认的值是由下面的公式来决定的：8 + (max_connections / 100)
thread_cache_size=1000
# 缓存表定义(.frm)文件的数量。如果表较多，可以增大该值加快打开表。与一般表缓存不同，表定义缓存不占用文件描述符，占用空间也小。
table_definition_cache=2000
# 默认值为 fdatasync。如果使用硬件 RAID 磁盘控制器, 可能需要设置为 O_DIRECT。
# 这在读取 InnoDB 缓冲池时可防止 “双缓冲(double buffering)” 效应，否则会在文件系统缓存与 InnoDB 缓存间形成 2 个副本(copy)。
# 如果不使用硬件 RAID 控制器，或者使用 SAN 存储时, O_DIRECT 可能会导致性能下降。
innodb_flush_method=O_DIRECT
# 这两个设置会影响 InnoDB 每秒在后台执行多少操作. 
# 大多数写 IO(除了写 InnoDB 日志)是后台操作的. 
# 如果你深度了解硬件性能(如每秒可以执行多少次 IO 操作),则使用这些功能是很可取的,而不是让它闲着
# 视磁盘 io 而定，sas raid：600~1000，sata ssd：2000~10000， pcie ssd：4000~40000
innodb_io_capacity=2000
innodb_io_capacity_max=8000
# InnoDB存储引擎在刷新一个脏页时，会检测该页所在区(extent)的所有页，如果是脏页，那么一起刷新。
# 这样做的好处是通过AIO可以将多个IO写操作合并为一个IO操作。对于传统机械硬盘建议使用，而对于固态硬盘可以关闭。
# 视磁盘类型而定：ssd 配置值为 0，sas raid：1
innodb_flush_neighbors=1
# UNDO 的优化处理：实现 undo 分离
# 在 MySQL5.5 以及之前，除了数据量自然增长之外，一旦出现大事务，其所使用的 undo log 占用的空间就会一直在 ibdata1 里面存在，即使这个事务已经关闭。
# 随着数据库上线时间越来越长，ibdata1 文件会越来越大，物理备份文件越来越大
# 指定单独存放undo表空间的目录，默认为.（即datadir）
# 开启在线回收（收缩）undo log 日志文件，支持动态设置
innodb_undo_log_truncate=ON
# 该参数实例初始化之后虽然不可直接改动，但是可以通过先停库，修改配置文件，然后移动 undo 表空间文件的方式去修改该参数；
innodb_undo_directory={{ v_mysql_undolog_dir }}
# 指定单独存放的 undo 表空间个数，例如如果设置为 3，则 undo 表空间为 undo001、undo002、undo003，
# 每个文件初始大小默认为10M。该参数实例初始化之后不可改动；
# innodb_undo_directory 参数要在数据库初始化时就需要写入 my.cnf，否则会报如下错误：
# Expected to open 4 undo tablespaces but was able to find only 0 undo tablespaces. 
# Set the innodb_undo_tablespaces parameter to the correct value and retry. Suggested value is 0
innodb_undo_tablespaces=4
# 指定回滚段的个数，默认128个。每个回滚段可同时支持 1024 个在线事务。这些回滚段会平均分布到各个undo表空间中。
# 该变量可以动态调整，但是物理上的回滚段不会减少，只是会控制用到的回滚段的个数。
innodb_undo_logs=128
# 当超过这个阀值（默认是1G），会触发 truncate 回收（收缩）动作，truncate 后空间缩小到 10M
innodb_max_undo_log_size=2G
# 开启多个内存缓冲池，把需要缓冲的数据 hash 到不同的缓冲池中，这样可以并行的内存读写
innodb_buffer_pool_instances=8
# 缓冲池大小必须始终等于或者是 innodb_buffer_pool_chunk_size * innodb_buffer_pool_instances 的倍数。
# 如果将缓冲池大小更改为不等于或等于 innodb_buffer_pool_chunk_size * innodb_buffer_pool_instances 的倍数的值，
# 则缓冲池大小将自动调整为等于或者是 innodb_buffer_pool_chunk_size * innodb_buffer_pool_instances 的倍数的值。
innodb_buffer_pool_chunk_size=128M
# 为了提升扩展性和刷脏效率，在 5.7.4 版本里引入了多个 page cleaner 线程。从而达到并行刷脏的效果
# 在该版本中，Page cleaner 并未和 buffer pool 绑定，其模型为一个协调线程 + 多个工作线程，协调线程本身也是工作线程。
# 因此如果 innodb_page_cleaners 设置为 8，那么就是一个协调线程，加 7 个工作线程
innodb_page_cleaners=4
# 根据官方文档描述，它会影响 page cleaner 线程每次刷脏页的数量，这是一个每 1 秒 loop 一次的线程
innodb_lru_scan_depth=1024
# 事务等待获取资源等待的最长时间，超过这个时间还未分配到资源则会返回应用失败；参数的时间单位是秒，默认值为 50
innodb_lock_wait_timeout=50
# 开启后，一旦锁等待超时，是事务内 sql 将全部回滚，且释放之前请求的锁。默认值为 OFF，表示 rollback 最后一条语句，有点坑
innodb_rollback_on_timeout=ON
# 是否将死锁相关信息保存到 MySQL 错误日志中
innodb_print_all_deadlocks=ON
# 控制使用几个独立 purge 线程（清除二进制日志）
innodb_purge_threads=4

# 控制 validate_password 的验证策略 0-->low 1-->MEDIUM 2-->strong
# validate_password_policy=0
# 密码长度的最小值(这个值最小要是 4)
# validate_password_length=4
# 密码中数字的最小个数
# validate_password_number_count=1
# 大小写的最小个数
# validate_password_mixed_case_count=2
# 特殊字符的最小个数
# validate_password_special_char_count=1

# slave 复制进程不随 mysql 启动而启动
skip-slave-start
# 接受的二进制日志文件存放位置设置
relay_log={{ v_mysql_binlog_dir }}/relay-bin
# 设置数据库为只读(一般为从库)
read_only={{ v_mysql_read_only }}

# MySQL 5.7.22+ 支持基于write-set的并行复制，暂不使用。
# 参考：https://yq.aliyun.com/articles/621197
# loose-binlog_transaction_dependency_tracking=WRITESET
# loose-transaction_write_set_extraction=XXHASH64
# binlog_transaction_dependency_history_size=25000
# slave_parallel_type=LOGICAL_CLOCK
# slave_parallel_workers=32

[mysqldump]
# 开启快速导出
quick
default-character-set={{ v_mysql_default_character_set }}
max_allowed_packet=256M
